package units

import (
	"fmt"
	"reflect"
)

type BacnetUnit struct {
	UnitName  string `json:"unit_name"`
	UnitValue int    `json:"unit_value"`
}

func GetBACnetUnitByValue(unit int) *BacnetUnit {
	for _, b := range BACnetUnits() {
		if unit == b.UnitValue {
			return &b
		}
	}
	return nil
}

func BACnetUnitsNames() ([]string, []string) {
	var out []string
	var outValue []string
	for _, unit := range BACnetUnits() {
		out = append(out, unit.UnitName)
		outValue = append(outValue, fmt.Sprint(unit.UnitValue))
	}
	return out, outValue
}

func BACnetUnits() []BacnetUnit {
	var out []BacnetUnit
	val := reflect.ValueOf(&unitsList).Elem()
	for i := 0; i < val.NumField(); i++ {
		newUint := BacnetUnit{
			UnitName:  val.Type().Field(i).Name,
			UnitValue: int(val.Field(i).Int()),
		}
		out = append(out, newUint)
	}
	return out
}

var unitsList = struct {
	// acceleration
	metersPerSecondPerSecond int
	// area
	squareMeters      int
	squareCentimeters int
	squareFeet        int
	squareInches      int
	// currency
	currency1  int
	currency2  int
	currency3  int
	currency4  int
	currency5  int
	currency6  int
	currency7  int
	currency8  int
	currency9  int
	currency10 int
	// electrical
	milliamperes          int
	amperes               int
	amperesPerMeter       int
	amperesPerSquareMeter int
	ampereSquareMeters    int
	decibels              int
	decibelsMillivolt     int
	decibelsVolt          int
	farads                int
	henrys                int
	ohms                  int
	ohmMeters             int
	milliohms             int
	kilohms               int
	megohms               int
	microsiemens          int
	millisiemens          int
	siemens               int
	// 1 mho equals 1 siemens
	siemensPerMeter         int
	teslas                  int
	volts                   int
	millivolts              int
	kilovolts               int
	megavolts               int
	voltAmperes             int
	kilovoltAmperes         int
	megavoltAmperes         int
	voltAmperesReactive     int
	kilovoltAmperesReactive int
	megavoltAmperesReactive int
	voltsPerDegreeKelvin    int
	voltsPerMeter           int
	degreesPhase            int
	powerFactor             int
	webers                  int
	// energy
	joules                int
	kilojoules            int
	kilojoulesPerKilogram int
	megajoules            int
	wattHours             int
	kilowattHours         int
	megawattHours         int
	wattHoursReactive     int
	kilowattHoursReactive int
	megawattHoursReactive int
	btus                  int
	kiloBtus              int
	megaBtus              int
	therms                int
	tonHours              int
	// enthalpy
	joulesPerKilogramDryAir     int
	kilojoulesPerKilogramDryAir int
	megajoulesPerKilogramDryAir int
	btusPerPoundDryAir          int
	btusPerPound                int
	// entropy
	joulesPerDegreeKelvin         int
	kilojoulesPerDegreeKelvin     int
	megajoulesPerDegreeKelvin     int
	joulesPerKilogramDegreeKelvin int
	// force
	newton int
	// frequency
	cyclesPerHour   int
	cyclesPerMinute int
	hertz           int
	kilohertz       int
	megahertz       int
	perHour         int
	// humidity
	gramsOfWaterPerKilogramDryAir int
	percentRelativeHumidity       int
	// length
	micrometers int
	millimeters int
	centimeters int
	kilometers  int
	meters      int
	inches      int
	feet        int
	// light
	candelas               int
	candelasPerSquareMeter int
	wattsPerSquareFoot     int
	wattsPerSquareMeter    int
	lumens                 int
	luxes                  int
	footCandles            int
	// mass
	milligrams int
	grams      int
	kilograms  int
	poundsMass int
	tons       int
	// mass flow
	gramsPerSecond      int
	gramsPerMinute      int
	kilogramsPerSecond  int
	kilogramsPerMinute  int
	kilogramsPerHour    int
	poundsMassPerSecond int
	poundsMassPerMinute int
	poundsMassPerHour   int
	tonsPerHour         int
	// power
	milliwatts        int
	watts             int
	kilowatts         int
	megawatts         int
	btusPerHour       int
	kiloBtusPerHour   int
	horsepower        int
	tonsRefrigeration int
	// pressure
	pascals                  int
	hectopascals             int
	kilopascals              int
	millibars                int
	bars                     int
	poundsForcePerSquareInch int
	millimetersOfWater       int
	centimetersOfWater       int
	inchesOfWater            int
	millimetersOfMercury     int
	centimetersOfMercury     int
	inchesOfMercury          int
	// temperature
	degreesCelsius         int
	degreesKelvin          int
	degreesKelvinPerHour   int
	degreesKelvinPerMinute int
	degreesFahrenheit      int
	degreeDaysCelsius      int
	degreeDaysFahrenheit   int
	deltaDegreesFahrenheit int
	deltaDegreesKelvin     int
	// time
	years             int
	months            int
	weeks             int
	days              int
	hours             int
	minutes           int
	seconds           int
	hundredthsSeconds int
	milliseconds      int
	// torque
	newtonMeters int
	// velocity
	millimetersPerSecond int
	millimetersPerMinute int
	metersPerSecond      int
	metersPerMinute      int
	metersPerHour        int
	kilometersPerHour    int
	feetPerSecond        int
	feetPerMinute        int
	milesPerHour         int
	// volume
	cubicFeet       int
	cubicMeters     int
	imperialGallons int
	milliliters     int
	liters          int
	usGallons       int
	// volumetric flow
	cubicFeetPerSecond       int
	cubicFeetPerMinute       int
	cubicFeetPerHour         int
	cubicMetersPerSecond     int
	cubicMetersPerMinute     int
	cubicMetersPerHour       int
	imperialGallonsPerMinute int
	millilitersPerSecond     int
	litersPerSecond          int
	litersPerMinute          int
	litersPerHour            int
	usGallonsPerMinute       int
	usGallonsPerHour         int
	// other
	degreesAngular                  int
	degreesCelsiusPerHour           int
	degreesCelsiusPerMinute         int
	degreesFahrenheitPerHour        int
	degreesFahrenheitPerMinute      int
	jouleSeconds                    int
	kilogramsPerCubicMeter          int
	kwHoursPerSquareMeter           int
	kwHoursPerSquareFoot            int
	megajoulesPerSquareMeter        int
	megajoulesPerSquareFoot         int
	noUnits                         int
	newtonSeconds                   int
	newtonsPerMeter                 int
	partsPerMillion                 int
	partsPerBillion                 int
	percent                         int
	percentObscurationPerFoot       int
	percentObscurationPerMeter      int
	percentPerSecond                int
	perMinute                       int
	perSecond                       int
	psiPerDegreeFahrenheit          int
	radians                         int
	radiansPerSecond                int
	revolutionsPerMinute            int
	squareMetersPerNewton           int
	wattsPerMeterPerDegreeKelvin    int
	wattsPerSquareMeterDegreeKelvin int
	perMille                        int
	gramsPerGram                    int
	kilogramsPerKilogram            int
	gramsPerKilogram                int
	milligramsPerGram               int
	milligramsPerKilogram           int
	gramsPerMilliliter              int
	gramsPerLiter                   int
	milligramsPerLiter              int
	microgramsPerLiter              int
	gramsPerCubicMeter              int
	milligramsPerCubicMeter         int
	microgramsPerCubicMeter         int
	nanogramsPerCubicMeter          int
	gramsPerCubicCentimeter         int
	becquerels                      int
	megabecquerels                  int
	gray                            int
	milligray                       int
	microgray                       int
	sieverts                        int
	millisieverts                   int
	microsieverts                   int
	microsievertsPerHour            int
	decibelsA                       int
	nephelometricTurbidityUnit      int
	ph                              int
	gramsPerSquareMeter             int
	minutesPerDegreeKelvin          int
	maxUnits                        int

	proprietaryRangeMin int
	proprietaryRangeMax int
}{
	// acceleration
	metersPerSecondPerSecond: 166,
	// area
	squareMeters:      0,
	squareCentimeters: 116,
	squareFeet:        1,
	squareInches:      115,
	// currency
	currency1:  105,
	currency2:  106,
	currency3:  107,
	currency4:  108,
	currency5:  109,
	currency6:  110,
	currency7:  111,
	currency8:  112,
	currency9:  113,
	currency10: 114,
	// electrical
	milliamperes:          2,
	amperes:               3,
	amperesPerMeter:       167,
	amperesPerSquareMeter: 168,
	ampereSquareMeters:    169,
	decibels:              199,
	decibelsMillivolt:     200,
	decibelsVolt:          201,
	farads:                170,
	henrys:                171,
	ohms:                  4,
	ohmMeters:             172,
	milliohms:             145,
	kilohms:               122,
	megohms:               123,
	microsiemens:          190,
	millisiemens:          202,
	siemens:               173,
	// 1 mho equals 1 siemens
	siemensPerMeter:         174,
	teslas:                  175,
	volts:                   5,
	millivolts:              124,
	kilovolts:               6,
	megavolts:               7,
	voltAmperes:             8,
	kilovoltAmperes:         9,
	megavoltAmperes:         10,
	voltAmperesReactive:     11,
	kilovoltAmperesReactive: 12,
	megavoltAmperesReactive: 13,
	voltsPerDegreeKelvin:    176,
	voltsPerMeter:           177,
	degreesPhase:            14,
	powerFactor:             15,
	webers:                  178,
	// energy
	joules:                16,
	kilojoules:            17,
	kilojoulesPerKilogram: 125,
	megajoules:            126,
	wattHours:             18,
	kilowattHours:         19,
	megawattHours:         146,
	wattHoursReactive:     203,
	kilowattHoursReactive: 204,
	megawattHoursReactive: 205,
	btus:                  20,
	kiloBtus:              147,
	megaBtus:              148,
	therms:                21,
	tonHours:              22,
	// enthalpy
	joulesPerKilogramDryAir:     23,
	kilojoulesPerKilogramDryAir: 149,
	megajoulesPerKilogramDryAir: 150,
	btusPerPoundDryAir:          24,
	btusPerPound:                117,
	// entropy
	joulesPerDegreeKelvin:         127,
	kilojoulesPerDegreeKelvin:     151,
	megajoulesPerDegreeKelvin:     152,
	joulesPerKilogramDegreeKelvin: 128,
	// force
	newton: 153,
	// frequency
	cyclesPerHour:   25,
	cyclesPerMinute: 26,
	hertz:           27,
	kilohertz:       129,
	megahertz:       130,
	perHour:         131,
	// humidity
	gramsOfWaterPerKilogramDryAir: 28,
	percentRelativeHumidity:       29,
	// length
	micrometers: 194,
	millimeters: 30,
	centimeters: 118,
	kilometers:  193,
	meters:      31,
	inches:      32,
	feet:        33,
	// light
	candelas:               179,
	candelasPerSquareMeter: 180,
	wattsPerSquareFoot:     34,
	wattsPerSquareMeter:    35,
	lumens:                 36,
	luxes:                  37,
	footCandles:            38,
	// mass
	milligrams: 196,
	grams:      195,
	kilograms:  39,
	poundsMass: 40,
	tons:       41,
	// mass flow
	gramsPerSecond:      154,
	gramsPerMinute:      155,
	kilogramsPerSecond:  42,
	kilogramsPerMinute:  43,
	kilogramsPerHour:    44,
	poundsMassPerSecond: 119,
	poundsMassPerMinute: 45,
	poundsMassPerHour:   46,
	tonsPerHour:         156,
	// power
	milliwatts:        132,
	watts:             47,
	kilowatts:         48,
	megawatts:         49,
	btusPerHour:       50,
	kiloBtusPerHour:   157,
	horsepower:        51,
	tonsRefrigeration: 52,
	// pressure
	pascals:                  53,
	hectopascals:             133,
	kilopascals:              54,
	millibars:                134,
	bars:                     55,
	poundsForcePerSquareInch: 56,
	millimetersOfWater:       206,
	centimetersOfWater:       57,
	inchesOfWater:            58,
	millimetersOfMercury:     59,
	centimetersOfMercury:     60,
	inchesOfMercury:          61,
	// temperature
	degreesCelsius:         62,
	degreesKelvin:          63,
	degreesKelvinPerHour:   181,
	degreesKelvinPerMinute: 182,
	degreesFahrenheit:      64,
	degreeDaysCelsius:      65,
	degreeDaysFahrenheit:   66,
	deltaDegreesFahrenheit: 120,
	deltaDegreesKelvin:     121,
	// time
	years:             67,
	months:            68,
	weeks:             69,
	days:              70,
	hours:             71,
	minutes:           72,
	seconds:           73,
	hundredthsSeconds: 158,
	milliseconds:      159,
	// torque
	newtonMeters: 160,
	// velocity
	millimetersPerSecond: 161,
	millimetersPerMinute: 162,
	metersPerSecond:      74,
	metersPerMinute:      163,
	metersPerHour:        164,
	kilometersPerHour:    75,
	feetPerSecond:        76,
	feetPerMinute:        77,
	milesPerHour:         78,
	// volume
	cubicFeet:       79,
	cubicMeters:     80,
	imperialGallons: 81,
	milliliters:     197,
	liters:          82,
	usGallons:       83,
	// volumetric flow
	cubicFeetPerSecond:       142,
	cubicFeetPerMinute:       84,
	cubicFeetPerHour:         191,
	cubicMetersPerSecond:     85,
	cubicMetersPerMinute:     165,
	cubicMetersPerHour:       135,
	imperialGallonsPerMinute: 86,
	millilitersPerSecond:     198,
	litersPerSecond:          87,
	litersPerMinute:          88,
	litersPerHour:            136,
	usGallonsPerMinute:       89,
	usGallonsPerHour:         192,
	// other
	degreesAngular:                  90,
	degreesCelsiusPerHour:           91,
	degreesCelsiusPerMinute:         92,
	degreesFahrenheitPerHour:        93,
	degreesFahrenheitPerMinute:      94,
	jouleSeconds:                    183,
	kilogramsPerCubicMeter:          186,
	kwHoursPerSquareMeter:           137,
	kwHoursPerSquareFoot:            138,
	megajoulesPerSquareMeter:        139,
	megajoulesPerSquareFoot:         140,
	noUnits:                         95,
	newtonSeconds:                   187,
	newtonsPerMeter:                 188,
	partsPerMillion:                 96,
	partsPerBillion:                 97,
	percent:                         98,
	percentObscurationPerFoot:       143,
	percentObscurationPerMeter:      144,
	percentPerSecond:                99,
	perMinute:                       100,
	perSecond:                       101,
	psiPerDegreeFahrenheit:          102,
	radians:                         103,
	radiansPerSecond:                184,
	revolutionsPerMinute:            104,
	squareMetersPerNewton:           185,
	wattsPerMeterPerDegreeKelvin:    189,
	wattsPerSquareMeterDegreeKelvin: 141,
	perMille:                        207,
	gramsPerGram:                    208,
	kilogramsPerKilogram:            209,
	gramsPerKilogram:                210,
	milligramsPerGram:               211,
	milligramsPerKilogram:           212,
	gramsPerMilliliter:              213,
	gramsPerLiter:                   214,
	milligramsPerLiter:              215,
	microgramsPerLiter:              216,
	gramsPerCubicMeter:              217,
	milligramsPerCubicMeter:         218,
	microgramsPerCubicMeter:         219,
	nanogramsPerCubicMeter:          220,
	gramsPerCubicCentimeter:         221,
	becquerels:                      222,
	megabecquerels:                  224,
	gray:                            225,
	milligray:                       226,
	microgray:                       227,
	sieverts:                        228,
	millisieverts:                   229,
	microsieverts:                   230,
	microsievertsPerHour:            231,
	decibelsA:                       232,
	nephelometricTurbidityUnit:      233,
	ph:                              234,
	gramsPerSquareMeter:             235,
	minutesPerDegreeKelvin:          236,

	maxUnits: 237,

	proprietaryRangeMin: 256,
	proprietaryRangeMax: 65535,
}
